//
// Mixins
// ------------------------------------------------------------------------
// _mixins.scss
// @version   1.0 | 19th Feb, 2013
// @packege   sass-directory
// @author    Beau Charman | @beaucharman | http://beaucharman.me
// @link      https://github.com/beaucharman/Sass-Directory
// @license   GNU http://www.gnu.org/licenses/lgpl.txt
// ------------------------------------------------------------------------ /

// Breakpoints
// ------------------------------------------------------------------------
// Thank you http://css-tricks.com/media-queries-sass-3-2-and-codekit/
// ------------------------------------------------------------------------ /
@mixin breakpoint($point) {

  @if $point == small {

    // Min Width - small screen and tablets
    @media screen and (min-width: $small) { @content; }
  }

  @else if $point == medium {

    // Min Width - medium tablets, screens and iPads
    @media screen and (min-width: $medium) { @content; }
  }

  @else if $point == large {

    // Min width - larger desktop screens
    @media screen and (min-width: $large) { @content; }
  }
}

// Background RGBA
@mixin background-rgba($color, $opacity: 0.5)
{
    background-color: $color;
    background-color: rgba($color, $opacity);
}

//
// Grid system
// ------------------------------------------------------------------------ /

@mixin make-row {
  // Negative margin the row out to align the content of columns
  margin-left: -$grid-column-padding;
  margin-right: -$grid-column-padding;
  // Then clear the floated columns
  @include clearfix;
}

@mixin make-column($columns) {
  @media (min-width: $grid-float-breakpoint) {
    float: left;
    // Calculate width based on number of columns available
    width: percentage($columns / $grid-columns);
  }
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Set inner padding as gutters instead of margin
  padding-left: $grid-column-padding;
  padding-right: $grid-column-padding;
  // Proper box-model (padding doesn't add to width)
  @include box-sizing(border-box);
}

@mixin make-column-offset($columns) {
  @media (min-width: $grid-float-breakpoint) {
    margin-left: percentage($columns / $grid-columns);
  }
}